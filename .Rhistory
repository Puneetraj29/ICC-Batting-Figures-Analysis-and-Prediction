install.packages(c("backports", "glue", "openssl", "rlang", "stringi", "tibble"))
install.packages("tidyverse")
library(tidyverse)
df<- read.csv("C:/Users/Puneetraj Makhija/Desktop/R Programming/MiniProject/104_ICCWorldCup.csv", stringsAsFactors = FALSE)
str(df)
install.packages("Rtools")
install.packages("Hmisc")
require(Hmisc)
install.packages("Rtools")
install.packages("Hmisc")
require(Hmisc)
#Cleaning data by converting character to Numeric in Inning_Batted
df$Innings_Batted = as.numeric(substring(df$Innings_Batted,1))
#Cleaning data by converting character to Numeric in Not_Outs
df$Not_Outs = as.numeric(substring(df$Not_Outs,1))
#Cleaning data by converting character to Numeric in Runs_Scored
df$Runs_Scored = as.numeric(substring(df$Runs_Scored,1))
#Cleaning data by converting character to Numeric in Highest_Innings_Score
df$Highest_Innings_Score  = as.numeric(substring(df$Highest_Innings_Score ,1))
#Cleaning data by converting character to Numeric in Batting_Average
df$ Batting_Average  = as.numeric(substring(df$Batting_Average ,1))
#Cleaning data by converting character to Numeric in Balls_Faced
df$ Balls_Faced  = as.numeric(substring(df$Balls_Faced ,1))
#Cleaning data by converting character to Numeric in Batting_Strike_Rate
df$ Batting_Strike_Rate  = as.numeric(substring(df$Batting_Strike_Rate ,1))
#Cleaning data by converting character to Numeric in Hundreds_Scored
df$ Hundreds_Scored  = as.numeric(substring(df$Hundreds_Scored ,1))
#Cleaning data by converting character to Numeric in Runs_Scored_above_50_or._50
df$ Runs_Scored_above_50_or._50  = as.numeric(substring(df$ Runs_Scored_above_50_or._50 ,1))
#Cleaning data by converting character to integer in Ducks_Scored
df$ Ducks_Scored  = as.numeric(substring(df$Ducks_Scored ,1))
#check if any missing values in Starting_Year  column of df
is.na(df$Starting_Year)
#how many  missing values
sum(is.na(df$Starting_Year))
install.packages("Hmisc")
install.packages("tidyr") #for pipe operator
library(tidyr)
install.packages("dplyr") #for distinct function
install.packages("dplyr")
library(dplyr)
#summarise function for distinct values
df %>% summarise(n= n_distinct(Starting_Year))
#To Check the no. of missing values in Starting_Year
df %>% summarise(count = sum(is.na(Starting_Year)))
#check if any missing values in Ending_Year column of df
is.na(df$Ending_Year)
#To Check the no. of missing values in Ending_Year
df %>% summarise(count = sum(is.na(Ending_Year)))
#To Check the no. of missing values in Span_in_Years
df %>% summarise(count = sum(is.na(Span_in_Years)))
#To Check the no. of missing values in Matches_Played
df %>% summarise(count = sum(is.na(Matches_Played)))
#To Check the no. of missing values in Innings_Batted
df %>% summarise(count = sum(is.na(Innings_Batted)))
df <- df %>% mutate(Innings_Batted
=replace(Innings_Batted,is.na(Innings_Batted),mean(Innings_Batted,na.rm = TRUE)))
#To Check the no. of missing values in Not_Outs
df %>% summarise(count = sum(is.na(Not_Outs)))
df <- df %>% mutate(Not_Outs
=replace(Not_Outs,is.na(Not_Outs),mean(Not_Outs,na.rm = TRUE)))
#To Check the no. of missing values in  Runs_Scored
df %>% summarise(count = sum(is.na( Runs_Scored)))
df <- df %>% mutate( Runs_Scored
=replace( Runs_Scored,is.na( Runs_Scored),mean( Runs_Scored,na.rm = TRUE)))
#To Check the no. of missing values in  Highest_Innings_Score
df %>% summarise(count = sum(is.na( Highest_Innings_Score)))
df <- df %>% mutate( Highest_Innings_Score
=replace( Highest_Innings_Score,is.na( Highest_Innings_Score),mean( Highest_Innings_Score,na.rm = TRUE)))
#To Check the no. of missing values in  Batting_Average
df %>% summarise(count = sum(is.na( Batting_Average)))
df <- df %>% mutate( Batting_Average
=replace( Batting_Average,is.na( Batting_Average),mean( Batting_Average,na.rm = TRUE)))
#To Check the no. of missing values in  Balls_Faced
df %>% summarise(count = sum(is.na( Balls_Faced)))
df <- df %>% mutate( Balls_Faced
=replace( Balls_Faced,is.na( Balls_Faced),mean( Balls_Faced,na.rm = TRUE)))
#To Check the no. of missing values in  Balls_Faced
df %>% summarise(count = sum(is.na( Balls_Faced)))
df <- df %>% mutate( Balls_Faced
=replace( Balls_Faced,is.na( Balls_Faced),mean( Balls_Faced,na.rm = TRUE)))
#To Check the no. of missing values in  Batting_Strike_Rate
df %>% summarise(count = sum(is.na( Batting_Strike_Rate)))
df <- df %>% mutate( Batting_Strike_Rate
=replace( Batting_Strike_Rate,is.na( Batting_Strike_Rate),mean( Batting_Strike_Rate,na.rm = TRUE)))
#To Check the no. of missing values in  Hundreds_Scored
df %>% summarise(count = sum(is.na( Hundreds_Scored)))
df <- df %>% mutate( Hundreds_Scored
=replace( Hundreds_Scored,is.na( Hundreds_Scored),mean( Hundreds_Scored,na.rm = TRUE)))
getwd()
#To Check the no. of missing values in  Runs_Scored_above_50_or._50
df %>% summarise(count = sum(is.na( Runs_Scored_above_50_or._50)))
df <- df %>% mutate( Runs_Scored_above_50_or._50
=replace( Runs_Scored_above_50_or._50,is.na( Runs_Scored_above_50_or._50),mean( Runs_Scored_above_50_or._50,na.rm = TRUE)))
#To Check the no. of missing values in  Ducks_Scored
df %>% summarise(count = sum(is.na( Ducks_Scored )))
df <- df %>% mutate( Ducks_Scored
=replace( Ducks_Scored ,is.na( Ducks_Scored ),mean( Ducks_Scored ,na.rm = TRUE)))
********************************************************************************************************************************************************
#EDA
#set the wkd dir
setwd("C:/Users/Puneetraj Makhija/Desktop/R Programming/MiniProject")
getwd
df
class(df)
dim(df)
names(df) #or
colnames(df)
object.size(df)
head(df)
tail(df)
summary(df)
str
#returns mean, missing values are removed, if #na.rm=TRUE.
mean(df$Starting_Year, na.rm=TRUE)
median(df$Starting_Year, na.rm=TRUE)
range(df$Starting_Year,na.rm=TRUE)
var(df$Starting_Year,na.rm=TRUE)
sd(df$Starting_Year, na.rm=TRUE)
quantile(df$Starting_Year, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Starting_Year)
mean(df$Ending_Year, na.rm=TRUE)
median(df$Ending_Year, na.rm=TRUE)
range(df$Ending_Year,na.rm=TRUE)
var(df$Ending_Year,na.rm=TRUE)
sd(df$Ending_Year, na.rm=TRUE)
quantile(df$Ending_Year, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Ending_Year)
mean(df$Span_in_Years, na.rm=TRUE)
median(df$Span_in_Years, na.rm=TRUE)
range(df$Span_in_Years,na.rm=TRUE)
var(df$Span_in_Years,na.rm=TRUE)
sd(df$Span_in_Years, na.rm=TRUE)
quantile(df$Span_in_Years, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Span_in_Years)
mean(df$Matches_Played, na.rm=TRUE)
median(df$Matches_Played, na.rm=TRUE)
range(df$Matches_Played,na.rm=TRUE)
var(df$Matches_Played,na.rm=TRUE)
sd(df$Matches_Played, na.rm=TRUE)
quantile(df$Matches_Played, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Matches_Played)
mean(df$Innings_Batted, na.rm=TRUE)
median(df$Innings_Batted, na.rm=TRUE)
range(df$Innings_Batted,na.rm=TRUE)
var(df$Innings_Batted,na.rm=TRUE)
sd(df$Innings_Batted, na.rm=TRUE)
quantile(df$Innings_Batted, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Innings_Batted)
mean(df$Not_Outs, na.rm=TRUE)
median(df$Not_Outs, na.rm=TRUE)
range(df$Not_Outs,na.rm=TRUE)
var(df$Not_Outs,na.rm=TRUE)
sd(df$Not_Outs, na.rm=TRUE)
quantile(df$Not_Outs, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Not_Outs)
mean(df$Runs_Scored, na.rm=TRUE)
median(df$Runs_Scored, na.rm=TRUE)
range(df$Runs_Scored,na.rm=TRUE)
var(df$Runs_Scored,na.rm=TRUE)
sd(df$Runs_Scored, na.rm=TRUE)
quantile(df$Runs_Scored, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Runs_Scored)
mean(df$Highest_Innings_Score, na.rm=TRUE)
median(df$Highest_Innings_Score, na.rm=TRUE)
range(df$Highest_Innings_Score,na.rm=TRUE)
var(df$Highest_Innings_Score,na.rm=TRUE)
sd(df$Highest_Innings_Score, na.rm=TRUE)
quantile(df$Highest_Innings_Score, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Highest_Innings_Score)
mean(df$Batting_Average, na.rm=TRUE)
median(df$Batting_Average, na.rm=TRUE)
range(df$Batting_Average,na.rm=TRUE)
var(df$Batting_Average,na.rm=TRUE)
sd(df$Batting_Average, na.rm=TRUE)
quantile(df$Batting_Average, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Batting_Average)
mean(df$Balls_Faced, na.rm=TRUE)
median(df$Balls_Faced, na.rm=TRUE)
range(df$Balls_Faced,na.rm=TRUE)
var(df$Balls_Faced,na.rm=TRUE)
sd(df$Balls_Faced, na.rm=TRUE)
quantile(df$Balls_Faced, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Balls_Faced)
mean(df$Batting_Strike_Rate, na.rm=TRUE)
median(df$Batting_Strike_Rate, na.rm=TRUE)
range(df$Batting_Strike_Rate,na.rm=TRUE)
var(df$Batting_Strike_Rate,na.rm=TRUE)
sd(df$Batting_Strike_Rate, na.rm=TRUE)
quantile(df$Batting_Strike_Rate, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Batting_Strike_Rate)
mean(df$Hundreds_Scored, na.rm=TRUE)
median(df$Hundreds_Scored, na.rm=TRUE)
range(df$Hundreds_Scored,na.rm=TRUE)
var(df$Hundreds_Scored,na.rm=TRUE)
sd(df$Hundreds_Scored, na.rm=TRUE)
quantile(df$Hundreds_Scored, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Hundreds_Scored)
mean(df$Runs_Scored_above_50_or._50, na.rm=TRUE)
median(df$Runs_Scored_above_50_or._50, na.rm=TRUE)
range(df$Runs_Scored_above_50_or._50,na.rm=TRUE)
var(df$Runs_Scored_above_50_or._50,na.rm=TRUE)
sd(df$Runs_Scored_above_50_or._50, na.rm=TRUE)
quantile(df$Runs_Scored_above_50_or._50, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Runs_Scored_above_50_or._50)
mean(df$Ducks_Scored, na.rm=TRUE)
median(df$Ducks_Scored, na.rm=TRUE)
range(df$Ducks_Scored,na.rm=TRUE)
var(df$Ducks_Scored,na.rm=TRUE)
sd(df$Ducks_Scored, na.rm=TRUE)
quantile(df$Ducks_Scored, probs=seq(0,1,0.25),na.rm=TRUE)
fivenum(df$Ducks_Scored)
SIY <- df$Span_in_Years
MP <- df$Matches_Played
IS<- df$Innings_Batted
NO<- df$Not_Outs
RS<- df$Runs_Scored
HIS<- df$Highest_Innings_Score
BA<- df$Batting_Average
BF<- df$Balls_Faced
BSR<- df$Batting_Strike_Rate
HS<- df$Hundreds_Scored
RSA<- df$Runs_Scored_above_50_or._50
DS<- df$Ducks_Scored
install.packages("moments")
library(moments)
skewness(SIY)
skewness(MP)
skewness(IS)
skewness(NO)
skewness(RS)
skewness(HIS)
skewness(BA)
skewness(BF)
skewness(BSR)
skewness(HS)
skewness(RSA)
skewness(DS)
#calculation of kurtosis
kurtosis(SIY) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(MP) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(IS) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(NO) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(RS) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(HIS) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(BA) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(BF) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(BSR) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(HS) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(RSA) #reports Pearson's (proper) kurtosis (> or < 3)
kurtosis(DS) #reports Pearson's (proper) kurtosis (> or < 3)
********************************************************************************************************************************************
#Data visualization in R
# R has 3 plotting systems
#1. Base plotting system
#2. Lattice plotting system
#3. GGplot2
install.packages("ggplot2")
library(ggplot2)
install.packages("ggthemes")
library(ggthemes)
library(tidyverse)
df<- read.csv("C:/Users/Puneetraj Makhija/Desktop/R Programming/MiniProject/104_ICCWorldCup.csv", stringsAsFactors = FALSE)
str(df)
grap <- ggplot(data=df)
print(grap)
ggplot(data=df, aes(y=Country))+ geom_bar(col="white", fill="red") + labs(title ="Number of Matches Played", y = "Country", x = "No. of Matches")
ggplot(data=df, aes(Span_in_Years))+ geom_freqpoly(color="blue",size=2)  + labs( y = "No. Of Years", x = "Duration Of Player")  + theme_classic()
ggplot(data=df, aes(x=Matches_Played,y=Not_Outs, color= Country))+ geom_jitter()
ggplot(data=df, aes(x=as.numeric(Batting_Average))) + geom_histogram(bins=60, fill="orange",color="Black") + labs(x="Batting_Average",y="No. of Matches")
ggplot(data=df, aes(x=as.numeric(Span_in_Years),y=as.numeric(Runs_Scored)))+ geom_bar(stat = "identity",fill="blue") + labs(title=" Years v/s Runs Scored",x="Span in Years",y="Runs Scored")
ggplot(data=df, aes(x=Balls_Faced,y=Runs_Scored,color= Span_in_Years)) + geom_point() +scale_color_gradient(low="blue", high="red") + ggtitle("Runs Scored over his Career") + theme_classic()
ggplot(data=df,aes(x=Starting_Year,y=Batting_Strike_Rate)) + geom_boxplot(fill="blue") + ylim(0,130) + theme(plot.background = element_rect(fill = "lightblue")) + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 1,
colour = "black")) + labs(title = "Boxplot of Batting Strike Rate",x="Starting Year",y="Batting Strike Rate")
ggplot(data=df, aes(x=Country, y=Hundreds_Scored))+ geom_bar(stat = "identity", fill="white")  + theme_dark() +  theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 1,
colour = "black")) + labs(title = "Hundreds Scored",y="No,. of Hundreds")
*****************************************************************************************************************************************************************************************************************************************************************************************************************************
# Multiple Linear Regression
input <- df[,c("Innings_Batted","Runs_Scored","Batting_Average")]
# Create the relationship model.
model <- lm(formula = Runs_Scored~Innings_Batted*Batting_Average , data = input)
# Show the model.
print(model)
# Get the Intercept and coefficients as vector
# elements.
a<- coef(model)[1]
XIB <- coef(model)[2]
XBA <- coef(model)[3]
print(a)
print(XIB)
print(XBA)
newdata <- data.frame(Innings_Batted=29,Batting_Average=100.000)
Y <- predict(model,newdata)
print(Y)
#Expected value should be 2900 but the actual value is calculated and observed to be 2504.811
#Hence the error is 396
install.packages("caTools")
library(caTools)
split <- sample.split(df,SplitRatio=0.8)
split
train_data <- subset(df,split==TRUE)
test_data <- subset(df, split==FALSE)
#to check correlation
dt <- as.data.frame(apply(df,2,as.numeric))
cr <- cor(dt)
cr
model <- lm(Runs_Scored~Innings_Batted*Batting_Average,dt)
summary(model)
predicted <- predict(model, test_data)
predicted
plot(test_data$Runs_Scored,type = "l",lty=1.8, col="green")
lines(predicted,type="l", col="red")
